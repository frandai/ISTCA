/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package datos;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import util.horarioAuxiliarTutor;

/**
 *
 * @author sergio
 */
@Entity
@Table(schema = "public")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Tutor.findAll", query = "SELECT t FROM Tutor t"),
    @NamedQuery(name = "Tutor.findByNif", query = "SELECT t FROM Tutor t WHERE t.nif = :nif")})
public class Tutor implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    @Column(nullable = false, length = 2147483647)
    private String nif;
    @ManyToMany(mappedBy = "tutorList")
    private List<Grupo> grupoList;
    @JoinColumn(name = "NIF", referencedColumnName = "NIF", nullable = false, insertable = false, updatable = false)
    @OneToOne(optional = false)
    private Persona persona;
    @JoinColumn(name = "EMPRESA", referencedColumnName = "NIF", nullable = false)
    @ManyToOne(optional = false)
    private Empresa empresa;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "tutor1")
    private List<TutoriaHorario> tutoriaHorarioList;
    @OneToMany(mappedBy = "tutor")
    private List<Evento> eventoList;
    @Transient //Variable que se usa para generar las Horas de Tutoría cuando el Tutor
    //Aún no está asociado en la BD (se trabaja a nivel de objeto, después se trabaja a
    //nivel de BD).
    private List<horarioAuxiliarTutor> horarioGeneracionGrupo;
    @Transient //Variable que se usa para saber las horas de tutoría de un tutor asocaido a un Grupo
    //en concreto
    private Short horasTutoria;

    public Short getHorasTutoria() {
        return horasTutoria;
    }

    public void setHorasTutoria(Short horasTutoria) {
        this.horasTutoria = horasTutoria;
    }

    public List<horarioAuxiliarTutor> getHorarioGeneracionGrupo() {
        return horarioGeneracionGrupo;
    }

    public void setHorarioGeneracionGrupo(List<horarioAuxiliarTutor> horarioGeneracionGrupo) {
        this.horarioGeneracionGrupo = horarioGeneracionGrupo;
    }

    public Tutor() {
    }

    public Tutor(String nif) {
        this.nif = nif;
    }

    public String getNif() {
        return nif;
    }

    public void setNif(String nif) {
        this.nif = nif;
    }

    @XmlTransient
    public List<Grupo> getGrupoList() {
        return grupoList;
    }

    public void setGrupoList(List<Grupo> grupoList) {
        this.grupoList = grupoList;
    }

    public Persona getPersona() {
        return persona;
    }

    public void setPersona(Persona persona) {
        this.persona = persona;
    }

    public Empresa getEmpresa() {
        return empresa;
    }

    public void setEmpresa(Empresa empresa) {
        this.empresa = empresa;
    }

    @XmlTransient
    public List<TutoriaHorario> getTutoriaHorarioList() {
        return tutoriaHorarioList;
    }

    public void setTutoriaHorarioList(List<TutoriaHorario> tutoriaHorarioList) {
        this.tutoriaHorarioList = tutoriaHorarioList;
    }

    @XmlTransient
    public List<Evento> getEventoList() {
        return eventoList;
    }

    public void setEventoList(List<Evento> eventoList) {
        this.eventoList = eventoList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (nif != null ? nif.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Tutor)) {
            return false;
        }
        Tutor other = (Tutor) object;
        if ((this.nif == null && other.nif != null) || (this.nif != null && !this.nif.equals(other.nif))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "datos.Tutor[ nif=" + nif + " ]";
    }

    public int getNumCursosHorario(Horario h) {
        int n = 0;
        Date ahora = new Date();
        for (TutoriaHorario th : getTutoriaHorarioList()) {
            if (th.getHorario1().getHoraInicio().equals(h.getHoraInicio())
                    && th.getGrupo1().getfInicio().before(ahora)
                    && th.getGrupo1().getFFin().after(ahora)) {
                n++;
            }
        }
        return n;
    }
}
