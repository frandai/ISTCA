/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package datos;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 *
 * @author sergio
 */
@Entity
@Table( schema = "public")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Liquidacion.findAll", query = "SELECT l FROM Liquidacion l"),
    @NamedQuery(name = "Liquidacion.findById", query = "SELECT l FROM Liquidacion l WHERE l.id = :id"),
    @NamedQuery(name = "Liquidacion.findByNombre", query = "SELECT l FROM Liquidacion l WHERE l.nombre = :nombre"),
    @NamedQuery(name = "Liquidacion.findByFechaCreacion", query = "SELECT l FROM Liquidacion l WHERE l.fechaCreacion = :fechaCreacion")})
public class Liquidacion implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    @Column(nullable = false, length = 2147483647)
    private String id;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    @Column(nullable = false, length = 2147483647)
    private String nombre;
    @Basic(optional = false)
    @NotNull
    @Column(name = " FECHA_CREACION", nullable = false)
    @Temporal(TemporalType.DATE)
    private Date fechaCreacion;
    @JoinTable(name = "LIQUIDACION_RAPPEL", joinColumns = {
        @JoinColumn(name = "LIQUIDACION", referencedColumnName = "ID", nullable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "RAPPEL", referencedColumnName = "ID", nullable = false)})
    @ManyToMany
    private List<Rappel> rappelList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "liquidacion1")
    private List<LiquidacionHistoricoEstado> liquidacionHistoricoEstadoList;
    @OneToMany(mappedBy = "liquidacion")
    private List<MatriculaComercial> matriculaComercialList;
    @JoinColumn(name = "TIPO", referencedColumnName = "ID", nullable = false)
    @ManyToOne(optional = false)
    private LiquidacionTipo tipo;

    public Liquidacion() {
    }

    public Liquidacion(String id) {
        this.id = id;
    }

    public Liquidacion(String id, String nombre, Date fechaCreacion) {
        this.id = id;
        this.nombre = nombre;
        this.fechaCreacion = fechaCreacion;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public Date getFechaCreacion() {
        return fechaCreacion;
    }

    public void setFechaCreacion(Date fechaCreacion) {
        this.fechaCreacion = fechaCreacion;
    }

    @XmlTransient
    public List<Rappel> getRappelList() {
        return rappelList;
    }

    public void setRappelList(List<Rappel> rappelList) {
        this.rappelList = rappelList;
    }

    @XmlTransient
    public List<LiquidacionHistoricoEstado> getLiquidacionHistoricoEstadoList() {
        return liquidacionHistoricoEstadoList;
    }

    public void setLiquidacionHistoricoEstadoList(List<LiquidacionHistoricoEstado> liquidacionHistoricoEstadoList) {
        this.liquidacionHistoricoEstadoList = liquidacionHistoricoEstadoList;
    }

    @XmlTransient
    public List<MatriculaComercial> getMatriculaComercialList() {
        return matriculaComercialList;
    }

    public void setMatriculaComercialList(List<MatriculaComercial> matriculaComercialList) {
        this.matriculaComercialList = matriculaComercialList;
    }

    public LiquidacionTipo getTipo() {
        return tipo;
    }

    public void setTipo(LiquidacionTipo tipo) {
        this.tipo = tipo;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Liquidacion)) {
            return false;
        }
        Liquidacion other = (Liquidacion) object;
        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "datos.Liquidacion[ id=" + id + " ]";
    }
    
}
